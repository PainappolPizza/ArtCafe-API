// database
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// generator
generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

// enums
enum Role {
  ADMIN
  OWNER
  USER
}

enum Gender {
  MALE
  FEMALE
  DIVERSE
}

enum Importance {
  LOW
  MEDIUM
  HIGH
}

// models
model User {
  id          String     @id @default(cuid())
  name        String
  surname     String
  email       String     @unique
  username    String     @unique
  role        Role       @default(USER)
  gender      Gender
  points      Int        @default(0)
  location    String
  joined      DateTime   @default(now())
  creations   Artefact[] @relation("author")
  placeId     String
  collections Artefact[] @relation("unveiler")
  scenes      Scene[]
  stores      Store[]
}

model Artefact {
  id         String    @id @default(cuid())
  name       String
  uri        String
  author     User      @relation("author", fields: [authorId], references: [id])
  authorId   String
  created    DateTime  @default(now())
  discovered DateTime?
  hidden     String?
  placeId    String?
  unveiler   User?     @relation("unveiler", fields: [userId], references: [id])
  userId     String?
}

model Scene {
  id       String    @id @default(cuid())
  uri      String
  owner    User      @relation(fields: [userId], references: [id])
  userId   String
  count    Int       @default(5)
  created  DateTime  @default(now())
  modified DateTime?
  Store    Store[]
}

model Store {
  id         String     @id @default(cuid())
  name       String
  manager    User       @relation(fields: [userId], references: [id])
  userId     String
  location   String
  placeId    String
  country    String
  postcode   String
  city       String
  address    String
  importance Importance
  scene      Scene?     @relation(fields: [sceneId], references: [id])
  sceneId    String?
  created    DateTime   @default(now())
  modified   DateTime?
  Loan       Loan[]
  Sale       Sale[]
}

model Equipment {
  id        String    @id @default(cuid())
  name      String
  available Boolean   @default(true)
  price     Int
  loan      Int
  created   DateTime  @default(now())
  modified  DateTime?
  Loan      Loan[]
}

model Loan {
  id          String    @id @default(cuid())
  store       Store     @relation(fields: [storeId], references: [id])
  storeId     String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId String
  valid       DateTime
  created     DateTime  @default(now())
  modified    DateTime?
}

model Package {
  id       String    @id @default(cuid())
  name     String
  price    Int
  currency String
  created  DateTime  @default(now())
  modified DateTime?
  Sale     Sale[]
}

model Sale {
  id         String    @id @default(cuid())
  store      Store     @relation(fields: [storeId], references: [id])
  storeId    String
  package    Package   @relation(fields: [packageId], references: [id])
  packageId  String
  expiration DateTime
  created    DateTime  @default(now())
  modified   DateTime?
}
