# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _RoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Role']]


class _RoleListFilterHasInput(TypedDict):
    has: 'enums.Role'


class _RoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Role']


class _RoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Role']


class _RoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


RoleListFilter = Union[
    _RoleListFilterHasInput,
    _RoleListFilterEqualsInput,
    _RoleListFilterHasSomeInput,
    _RoleListFilterIsEmptyInput,
    _RoleListFilterHasEveryInput,
]


class _RoleListUpdateSet(TypedDict):
    set: List['enums.Role']


class _RoleListUpdatePush(TypedDict):
    push: List['enums.Role']


RoleListUpdate = Union[
    List['enums.Role'],
    _RoleListUpdateSet,
    _RoleListUpdatePush,
]

class _ImportanceListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Importance']]


class _ImportanceListFilterHasInput(TypedDict):
    has: 'enums.Importance'


class _ImportanceListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Importance']


class _ImportanceListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Importance']


class _ImportanceListFilterIsEmptyInput(TypedDict):
    is_empty: bool


ImportanceListFilter = Union[
    _ImportanceListFilterHasInput,
    _ImportanceListFilterEqualsInput,
    _ImportanceListFilterHasSomeInput,
    _ImportanceListFilterIsEmptyInput,
    _ImportanceListFilterHasEveryInput,
]


class _ImportanceListUpdateSet(TypedDict):
    set: List['enums.Importance']


class _ImportanceListUpdatePush(TypedDict):
    push: List['enums.Importance']


ImportanceListUpdate = Union[
    List['enums.Importance'],
    _ImportanceListUpdateSet,
    _ImportanceListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    places: 'PlaceCreateManyNestedWithoutRelationsInput'
    Object3D: 'Object3DCreateNestedWithoutRelationsInput'
    object3DId: Optional[_str]


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    name: _str
    role: 'enums.Role'
    score: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    object3DId: Optional[_str]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    name: _str
    role: 'enums.Role'
    score: _int


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

UserWhereUniqueInput = _UserWhereUnique_id_Input


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    name: _str
    role: 'enums.Role'
    score: Union[AtomicIntInput, _int]
    places: 'PlaceUpdateManyWithoutRelationsInput'
    Object3D: 'Object3DUpdateOneWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    name: _str
    role: 'enums.Role'
    score: Union[AtomicIntInput, _int]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_score_OrderByInput = TypedDict(
    '_User_score_OrderByInput',
    {
        'score': 'SortOrder',
    },
    total=True
)

_User_object3DId_OrderByInput = TypedDict(
    '_User_object3DId_OrderByInput',
    {
        'object3DId': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_name_OrderByInput',
    '_User_role_OrderByInput',
    '_User_score_OrderByInput',
    '_User_object3DId_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    places: Union[bool, 'FindManyPlaceArgsFromUser']
    Object3D: Union[bool, 'Object3DArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    places: Union[bool, 'FindManyPlaceArgsFromUserRecursive1']
    Object3D: Union[bool, 'Object3DArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    places: Union[bool, 'FindManyPlaceArgsFromUserRecursive2']
    Object3D: Union[bool, 'Object3DArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    places: Union[bool, 'FindManyPlaceArgsFromUserRecursive3']
    Object3D: Union[bool, 'Object3DArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    places: Union[bool, 'FindManyPlaceArgsFromUserRecursive4']
    Object3D: Union[bool, 'Object3DArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class PlaceIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive1']
    Object3D: Union[bool, 'FindManyObject3DArgsFromUserRecursive1']


class PlaceIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive2']
    Object3D: Union[bool, 'FindManyObject3DArgsFromUserRecursive2']


class PlaceIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive3']
    Object3D: Union[bool, 'FindManyObject3DArgsFromUserRecursive3']


class PlaceIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive4']
    Object3D: Union[bool, 'FindManyObject3DArgsFromUserRecursive4']


class PlaceIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PlaceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PlaceIncludeFromPlaceRecursive1'


class PlaceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PlaceIncludeFromPlaceRecursive2'


class PlaceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PlaceIncludeFromPlaceRecursive3'


class PlaceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PlaceIncludeFromPlaceRecursive4'


class PlaceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPlaceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    include: 'PlaceIncludeFromPlaceRecursive1'


class FindManyPlaceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    include: 'PlaceIncludeFromPlaceRecursive2'


class FindManyPlaceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    include: 'PlaceIncludeFromPlaceRecursive3'


class FindManyPlaceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    include: 'PlaceIncludeFromPlaceRecursive4'


class FindManyPlaceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    
    

class Object3DIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    location: Union[bool, 'PlaceArgsFromUserRecursive1']
    found_by: Union[bool, 'FindManyUserArgsFromUserRecursive1']


class Object3DIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    location: Union[bool, 'PlaceArgsFromUserRecursive2']
    found_by: Union[bool, 'FindManyUserArgsFromUserRecursive2']


class Object3DIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    location: Union[bool, 'PlaceArgsFromUserRecursive3']
    found_by: Union[bool, 'FindManyUserArgsFromUserRecursive3']


class Object3DIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    location: Union[bool, 'PlaceArgsFromUserRecursive4']
    found_by: Union[bool, 'FindManyUserArgsFromUserRecursive4']


class Object3DIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class Object3DArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'Object3DIncludeFromObject3DRecursive1'


class Object3DArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'Object3DIncludeFromObject3DRecursive2'


class Object3DArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'Object3DIncludeFromObject3DRecursive3'


class Object3DArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'Object3DIncludeFromObject3DRecursive4'


class Object3DArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyObject3DArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    include: 'Object3DIncludeFromObject3DRecursive1'


class FindManyObject3DArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    include: 'Object3DIncludeFromObject3DRecursive2'


class FindManyObject3DArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    include: 'Object3DIncludeFromObject3DRecursive3'


class FindManyObject3DArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    include: 'Object3DIncludeFromObject3DRecursive4'


class FindManyObject3DArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    score: Union[_int, 'types.IntFilter']
    places: 'PlaceListRelationFilter'
    Object3D: 'Object3DRelationFilter'
    object3DId: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    score: Union[_int, 'types.IntFilter']
    places: 'PlaceListRelationFilter'
    Object3D: 'Object3DRelationFilter'
    object3DId: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    score: Union[_int, 'types.IntFilter']
    places: 'PlaceListRelationFilter'
    Object3D: 'Object3DRelationFilter'
    object3DId: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    score: Union[_int, 'types.IntFilter']
    places: 'PlaceListRelationFilter'
    Object3D: 'Object3DRelationFilter'
    object3DId: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    score: Union[_int, 'types.IntFilter']
    places: 'PlaceListRelationFilter'
    Object3D: 'Object3DRelationFilter'
    object3DId: Union[None, _str, 'types.StringFilter']



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    score: Union[_int, 'types.IntWithAggregatesFilter']
    object3DId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    score: Union[_int, 'types.IntWithAggregatesFilter']
    object3DId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    score: Union[_int, 'types.IntWithAggregatesFilter']
    object3DId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    score: Union[_int, 'types.IntWithAggregatesFilter']
    object3DId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    score: Union[_int, 'types.IntWithAggregatesFilter']
    object3DId: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    name: _str
    role: 'enums.Role'
    score: _int
    object3DId: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    score: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    score: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    email: _str
    name: _str
    role: 'enums.Role'
    score: _int
    object3DId: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    name: bool
    role: bool
    score: bool
    object3DId: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    name: bool
    role: bool
    score: bool
    object3DId: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    score: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'name': bool,
        'role': bool,
        'score': bool,
        'object3DId': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'name': int,
        'role': int,
        'score': int,
        'object3DId': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'name',
    'role',
    'score',
    'places',
    'Object3D',
    'object3DId',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'name',
    'role',
    'score',
    'object3DId',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'places',
        'Object3D',
    ]

# Place types

class PlaceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Place create method"""
    id: _str
    User: 'UserCreateNestedWithoutRelationsInput'
    userId: Optional[_str]
    Object3D: 'Object3DCreateManyNestedWithoutRelationsInput'


class PlaceCreateInput(PlaceOptionalCreateInput):
    """Required arguments to the Place create method"""
    name: _str
    city: _str
    country: _str
    geolocation: _str
    importance: 'enums.Importance'
    story: _str
    uri: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PlaceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Place create method, without relations"""
    id: _str
    userId: Optional[_str]


class PlaceCreateWithoutRelationsInput(PlaceOptionalCreateWithoutRelationsInput):
    """Required arguments to the Place create method, without relations"""
    name: _str
    city: _str
    country: _str
    geolocation: _str
    importance: 'enums.Importance'
    story: _str
    uri: _str


class PlaceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PlaceCreateWithoutRelationsInput'
    connect: 'PlaceWhereUniqueInput'


class PlaceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PlaceCreateWithoutRelationsInput', List['PlaceCreateWithoutRelationsInput']]
    connect: Union['PlaceWhereUniqueInput', List['PlaceWhereUniqueInput']]


_PlaceWhereUnique_id_Input = TypedDict(
    '_PlaceWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

PlaceWhereUniqueInput = _PlaceWhereUnique_id_Input


class PlaceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    city: _str
    country: _str
    geolocation: _str
    importance: 'enums.Importance'
    story: _str
    uri: _str
    User: 'UserUpdateOneWithoutRelationsInput'
    Object3D: 'Object3DUpdateManyWithoutRelationsInput'


class PlaceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    city: _str
    country: _str
    geolocation: _str
    importance: 'enums.Importance'
    story: _str
    uri: _str


class PlaceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PlaceCreateWithoutRelationsInput']
    connect: List['PlaceWhereUniqueInput']
    set: List['PlaceWhereUniqueInput']
    disconnect: List['PlaceWhereUniqueInput']
    delete: List['PlaceWhereUniqueInput']

    # TODO
    # update: List['PlaceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PlaceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PlaceScalarWhereInput']
    # upsert: List['PlaceUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PlaceCreateOrConnectWithoutRelationsInput']


class PlaceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PlaceCreateWithoutRelationsInput'
    connect: 'PlaceWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PlaceUpdateInput'
    # upsert: 'PlaceUpsertWithoutRelationsInput'
    # connectOrCreate: 'PlaceCreateOrConnectWithoutRelationsInput'


class PlaceUpsertInput(TypedDict):
    create: 'PlaceCreateInput'
    update: 'PlaceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Place_id_OrderByInput = TypedDict(
    '_Place_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Place_name_OrderByInput = TypedDict(
    '_Place_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Place_city_OrderByInput = TypedDict(
    '_Place_city_OrderByInput',
    {
        'city': 'SortOrder',
    },
    total=True
)

_Place_country_OrderByInput = TypedDict(
    '_Place_country_OrderByInput',
    {
        'country': 'SortOrder',
    },
    total=True
)

_Place_geolocation_OrderByInput = TypedDict(
    '_Place_geolocation_OrderByInput',
    {
        'geolocation': 'SortOrder',
    },
    total=True
)

_Place_importance_OrderByInput = TypedDict(
    '_Place_importance_OrderByInput',
    {
        'importance': 'SortOrder',
    },
    total=True
)

_Place_story_OrderByInput = TypedDict(
    '_Place_story_OrderByInput',
    {
        'story': 'SortOrder',
    },
    total=True
)

_Place_uri_OrderByInput = TypedDict(
    '_Place_uri_OrderByInput',
    {
        'uri': 'SortOrder',
    },
    total=True
)

_Place_userId_OrderByInput = TypedDict(
    '_Place_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

PlaceOrderByInput = Union[
    '_Place_id_OrderByInput',
    '_Place_name_OrderByInput',
    '_Place_city_OrderByInput',
    '_Place_country_OrderByInput',
    '_Place_geolocation_OrderByInput',
    '_Place_importance_OrderByInput',
    '_Place_story_OrderByInput',
    '_Place_uri_OrderByInput',
    '_Place_userId_OrderByInput',
]



# recursive Place types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PlaceRelationFilter = TypedDict(
    'PlaceRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PlaceListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PlaceInclude(TypedDict, total=False):
    """Place relational arguments"""
    User: Union[bool, 'UserArgsFromPlace']
    Object3D: Union[bool, 'FindManyObject3DArgsFromPlace']


    

class UserIncludeFromPlace(TypedDict, total=False):
    """Relational arguments for Place"""
    places: Union[bool, 'FindManyPlaceArgsFromPlaceRecursive1']
    Object3D: Union[bool, 'Object3DArgsFromPlaceRecursive1']


class UserIncludeFromPlaceRecursive1(TypedDict, total=False):
    """Relational arguments for Place"""
    places: Union[bool, 'FindManyPlaceArgsFromPlaceRecursive2']
    Object3D: Union[bool, 'Object3DArgsFromPlaceRecursive2']


class UserIncludeFromPlaceRecursive2(TypedDict, total=False):
    """Relational arguments for Place"""
    places: Union[bool, 'FindManyPlaceArgsFromPlaceRecursive3']
    Object3D: Union[bool, 'Object3DArgsFromPlaceRecursive3']


class UserIncludeFromPlaceRecursive3(TypedDict, total=False):
    """Relational arguments for Place"""
    places: Union[bool, 'FindManyPlaceArgsFromPlaceRecursive4']
    Object3D: Union[bool, 'Object3DArgsFromPlaceRecursive4']


class UserIncludeFromPlaceRecursive4(TypedDict, total=False):
    """Relational arguments for Place"""

    

class UserArgsFromPlace(TypedDict, total=False):
    """Arguments for Place"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPlaceRecursive1(TypedDict, total=False):
    """Arguments for Place"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPlaceRecursive2(TypedDict, total=False):
    """Arguments for Place"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPlaceRecursive3(TypedDict, total=False):
    """Arguments for Place"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPlaceRecursive4(TypedDict, total=False):
    """Arguments for Place"""
    
    

class FindManyUserArgsFromPlace(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPlaceRecursive1(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPlaceRecursive2(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPlaceRecursive3(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPlaceRecursive4(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class PlaceIncludeFromPlace(TypedDict, total=False):
    """Relational arguments for Place"""
    User: Union[bool, 'UserArgsFromPlaceRecursive1']
    Object3D: Union[bool, 'FindManyObject3DArgsFromPlaceRecursive1']


class PlaceIncludeFromPlaceRecursive1(TypedDict, total=False):
    """Relational arguments for Place"""
    User: Union[bool, 'UserArgsFromPlaceRecursive2']
    Object3D: Union[bool, 'FindManyObject3DArgsFromPlaceRecursive2']


class PlaceIncludeFromPlaceRecursive2(TypedDict, total=False):
    """Relational arguments for Place"""
    User: Union[bool, 'UserArgsFromPlaceRecursive3']
    Object3D: Union[bool, 'FindManyObject3DArgsFromPlaceRecursive3']


class PlaceIncludeFromPlaceRecursive3(TypedDict, total=False):
    """Relational arguments for Place"""
    User: Union[bool, 'UserArgsFromPlaceRecursive4']
    Object3D: Union[bool, 'FindManyObject3DArgsFromPlaceRecursive4']


class PlaceIncludeFromPlaceRecursive4(TypedDict, total=False):
    """Relational arguments for Place"""

    

class PlaceArgsFromPlace(TypedDict, total=False):
    """Arguments for Place"""
    include: 'PlaceIncludeFromPlaceRecursive1'


class PlaceArgsFromPlaceRecursive1(TypedDict, total=False):
    """Arguments for Place"""
    include: 'PlaceIncludeFromPlaceRecursive2'


class PlaceArgsFromPlaceRecursive2(TypedDict, total=False):
    """Arguments for Place"""
    include: 'PlaceIncludeFromPlaceRecursive3'


class PlaceArgsFromPlaceRecursive3(TypedDict, total=False):
    """Arguments for Place"""
    include: 'PlaceIncludeFromPlaceRecursive4'


class PlaceArgsFromPlaceRecursive4(TypedDict, total=False):
    """Arguments for Place"""
    
    

class FindManyPlaceArgsFromPlace(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    include: 'PlaceIncludeFromPlaceRecursive1'


class FindManyPlaceArgsFromPlaceRecursive1(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    include: 'PlaceIncludeFromPlaceRecursive2'


class FindManyPlaceArgsFromPlaceRecursive2(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    include: 'PlaceIncludeFromPlaceRecursive3'


class FindManyPlaceArgsFromPlaceRecursive3(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    include: 'PlaceIncludeFromPlaceRecursive4'


class FindManyPlaceArgsFromPlaceRecursive4(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    
    

class Object3DIncludeFromPlace(TypedDict, total=False):
    """Relational arguments for Place"""
    location: Union[bool, 'PlaceArgsFromPlaceRecursive1']
    found_by: Union[bool, 'FindManyUserArgsFromPlaceRecursive1']


class Object3DIncludeFromPlaceRecursive1(TypedDict, total=False):
    """Relational arguments for Place"""
    location: Union[bool, 'PlaceArgsFromPlaceRecursive2']
    found_by: Union[bool, 'FindManyUserArgsFromPlaceRecursive2']


class Object3DIncludeFromPlaceRecursive2(TypedDict, total=False):
    """Relational arguments for Place"""
    location: Union[bool, 'PlaceArgsFromPlaceRecursive3']
    found_by: Union[bool, 'FindManyUserArgsFromPlaceRecursive3']


class Object3DIncludeFromPlaceRecursive3(TypedDict, total=False):
    """Relational arguments for Place"""
    location: Union[bool, 'PlaceArgsFromPlaceRecursive4']
    found_by: Union[bool, 'FindManyUserArgsFromPlaceRecursive4']


class Object3DIncludeFromPlaceRecursive4(TypedDict, total=False):
    """Relational arguments for Place"""

    

class Object3DArgsFromPlace(TypedDict, total=False):
    """Arguments for Place"""
    include: 'Object3DIncludeFromObject3DRecursive1'


class Object3DArgsFromPlaceRecursive1(TypedDict, total=False):
    """Arguments for Place"""
    include: 'Object3DIncludeFromObject3DRecursive2'


class Object3DArgsFromPlaceRecursive2(TypedDict, total=False):
    """Arguments for Place"""
    include: 'Object3DIncludeFromObject3DRecursive3'


class Object3DArgsFromPlaceRecursive3(TypedDict, total=False):
    """Arguments for Place"""
    include: 'Object3DIncludeFromObject3DRecursive4'


class Object3DArgsFromPlaceRecursive4(TypedDict, total=False):
    """Arguments for Place"""
    
    

class FindManyObject3DArgsFromPlace(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    include: 'Object3DIncludeFromObject3DRecursive1'


class FindManyObject3DArgsFromPlaceRecursive1(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    include: 'Object3DIncludeFromObject3DRecursive2'


class FindManyObject3DArgsFromPlaceRecursive2(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    include: 'Object3DIncludeFromObject3DRecursive3'


class FindManyObject3DArgsFromPlaceRecursive3(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    include: 'Object3DIncludeFromObject3DRecursive4'


class FindManyObject3DArgsFromPlaceRecursive4(TypedDict, total=False):
    """Arguments for Place"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    


FindManyPlaceArgs = FindManyPlaceArgsFromPlace
FindFirstPlaceArgs = FindManyPlaceArgsFromPlace


    

class PlaceWhereInput(TypedDict, total=False):
    """Place arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    country: Union[_str, 'types.StringFilter']
    geolocation: Union[_str, 'types.StringFilter']
    importance: 'enums.Importance'
    story: Union[_str, 'types.StringFilter']
    uri: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    userId: Union[None, _str, 'types.StringFilter']
    Object3D: 'Object3DListRelationFilter'

    # should be noted that AND and NOT should be Union['PlaceWhereInputRecursive1', List['PlaceWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PlaceWhereInputRecursive1']
    OR: List['PlaceWhereInputRecursive1']
    NOT: List['PlaceWhereInputRecursive1']


class PlaceWhereInputRecursive1(TypedDict, total=False):
    """Place arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    country: Union[_str, 'types.StringFilter']
    geolocation: Union[_str, 'types.StringFilter']
    importance: 'enums.Importance'
    story: Union[_str, 'types.StringFilter']
    uri: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    userId: Union[None, _str, 'types.StringFilter']
    Object3D: 'Object3DListRelationFilter'

    # should be noted that AND and NOT should be Union['PlaceWhereInputRecursive2', List['PlaceWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PlaceWhereInputRecursive2']
    OR: List['PlaceWhereInputRecursive2']
    NOT: List['PlaceWhereInputRecursive2']


class PlaceWhereInputRecursive2(TypedDict, total=False):
    """Place arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    country: Union[_str, 'types.StringFilter']
    geolocation: Union[_str, 'types.StringFilter']
    importance: 'enums.Importance'
    story: Union[_str, 'types.StringFilter']
    uri: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    userId: Union[None, _str, 'types.StringFilter']
    Object3D: 'Object3DListRelationFilter'

    # should be noted that AND and NOT should be Union['PlaceWhereInputRecursive3', List['PlaceWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PlaceWhereInputRecursive3']
    OR: List['PlaceWhereInputRecursive3']
    NOT: List['PlaceWhereInputRecursive3']


class PlaceWhereInputRecursive3(TypedDict, total=False):
    """Place arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    country: Union[_str, 'types.StringFilter']
    geolocation: Union[_str, 'types.StringFilter']
    importance: 'enums.Importance'
    story: Union[_str, 'types.StringFilter']
    uri: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    userId: Union[None, _str, 'types.StringFilter']
    Object3D: 'Object3DListRelationFilter'

    # should be noted that AND and NOT should be Union['PlaceWhereInputRecursive4', List['PlaceWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PlaceWhereInputRecursive4']
    OR: List['PlaceWhereInputRecursive4']
    NOT: List['PlaceWhereInputRecursive4']


class PlaceWhereInputRecursive4(TypedDict, total=False):
    """Place arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    country: Union[_str, 'types.StringFilter']
    geolocation: Union[_str, 'types.StringFilter']
    importance: 'enums.Importance'
    story: Union[_str, 'types.StringFilter']
    uri: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    userId: Union[None, _str, 'types.StringFilter']
    Object3D: 'Object3DListRelationFilter'



# aggregate Place types


    

class PlaceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Place arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    geolocation: Union[_str, 'types.StringWithAggregatesFilter']
    importance: 'enums.Importance'
    story: Union[_str, 'types.StringWithAggregatesFilter']
    uri: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PlaceScalarWhereWithAggregatesInputRecursive1']
    OR: List['PlaceScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PlaceScalarWhereWithAggregatesInputRecursive1']


class PlaceScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Place arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    geolocation: Union[_str, 'types.StringWithAggregatesFilter']
    importance: 'enums.Importance'
    story: Union[_str, 'types.StringWithAggregatesFilter']
    uri: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PlaceScalarWhereWithAggregatesInputRecursive2']
    OR: List['PlaceScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PlaceScalarWhereWithAggregatesInputRecursive2']


class PlaceScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Place arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    geolocation: Union[_str, 'types.StringWithAggregatesFilter']
    importance: 'enums.Importance'
    story: Union[_str, 'types.StringWithAggregatesFilter']
    uri: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PlaceScalarWhereWithAggregatesInputRecursive3']
    OR: List['PlaceScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PlaceScalarWhereWithAggregatesInputRecursive3']


class PlaceScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Place arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    geolocation: Union[_str, 'types.StringWithAggregatesFilter']
    importance: 'enums.Importance'
    story: Union[_str, 'types.StringWithAggregatesFilter']
    uri: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PlaceScalarWhereWithAggregatesInputRecursive4']
    OR: List['PlaceScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PlaceScalarWhereWithAggregatesInputRecursive4']


class PlaceScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Place arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    geolocation: Union[_str, 'types.StringWithAggregatesFilter']
    importance: 'enums.Importance'
    story: Union[_str, 'types.StringWithAggregatesFilter']
    uri: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']



class PlaceGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    city: _str
    country: _str
    geolocation: _str
    importance: 'enums.Importance'
    story: _str
    uri: _str
    userId: _str
    _sum: 'PlaceSumAggregateOutput'
    _avg: 'PlaceAvgAggregateOutput'
    _min: 'PlaceMinAggregateOutput'
    _max: 'PlaceMaxAggregateOutput'
    _count: 'PlaceCountAggregateOutput'


class PlaceAvgAggregateOutput(TypedDict, total=False):
    """Place output for aggregating averages"""


class PlaceSumAggregateOutput(TypedDict, total=False):
    """Place output for aggregating sums"""


class PlaceScalarAggregateOutput(TypedDict, total=False):
    """Place output including scalar fields"""
    id: _str
    name: _str
    city: _str
    country: _str
    geolocation: _str
    importance: 'enums.Importance'
    story: _str
    uri: _str
    userId: _str


PlaceMinAggregateOutput = PlaceScalarAggregateOutput
PlaceMaxAggregateOutput = PlaceScalarAggregateOutput


class PlaceMaxAggregateInput(TypedDict, total=False):
    """Place input for aggregating by max"""
    id: bool
    name: bool
    city: bool
    country: bool
    geolocation: bool
    importance: bool
    story: bool
    uri: bool
    userId: bool


class PlaceMinAggregateInput(TypedDict, total=False):
    """Place input for aggregating by min"""
    id: bool
    name: bool
    city: bool
    country: bool
    geolocation: bool
    importance: bool
    story: bool
    uri: bool
    userId: bool


class PlaceNumberAggregateInput(TypedDict, total=False):
    """Place input for aggregating numbers"""


PlaceAvgAggregateInput = PlaceNumberAggregateInput
PlaceSumAggregateInput = PlaceNumberAggregateInput


PlaceCountAggregateInput = TypedDict(
    'PlaceCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'city': bool,
        'country': bool,
        'geolocation': bool,
        'importance': bool,
        'story': bool,
        'uri': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

PlaceCountAggregateOutput = TypedDict(
    'PlaceCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'city': int,
        'country': int,
        'geolocation': int,
        'importance': int,
        'story': int,
        'uri': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


PlaceKeys = Literal[
    'id',
    'name',
    'city',
    'country',
    'geolocation',
    'importance',
    'story',
    'uri',
    'User',
    'userId',
    'Object3D',
]
PlaceScalarFieldKeys = Literal[
    'id',
    'name',
    'city',
    'country',
    'geolocation',
    'importance',
    'story',
    'uri',
    'userId',
]
PlaceScalarFieldKeysT = TypeVar('PlaceScalarFieldKeysT', bound=PlaceScalarFieldKeys)

PlaceRelationalFieldKeys = Literal[
        'User',
        'Object3D',
    ]

# Object3D types

class Object3DOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Object3D create method"""
    id: _str
    location: 'PlaceCreateNestedWithoutRelationsInput'
    placeId: _str
    found_by: 'UserCreateManyNestedWithoutRelationsInput'


class Object3DCreateInput(Object3DOptionalCreateInput):
    """Required arguments to the Object3D create method"""
    data: 'fields.Base64'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class Object3DOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Object3D create method, without relations"""
    id: _str
    placeId: _str


class Object3DCreateWithoutRelationsInput(Object3DOptionalCreateWithoutRelationsInput):
    """Required arguments to the Object3D create method, without relations"""
    data: 'fields.Base64'


class Object3DCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'Object3DCreateWithoutRelationsInput'
    connect: 'Object3DWhereUniqueInput'


class Object3DCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['Object3DCreateWithoutRelationsInput', List['Object3DCreateWithoutRelationsInput']]
    connect: Union['Object3DWhereUniqueInput', List['Object3DWhereUniqueInput']]


_Object3DWhereUnique_id_Input = TypedDict(
    '_Object3DWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

Object3DWhereUniqueInput = _Object3DWhereUnique_id_Input


class Object3DUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    location: 'PlaceUpdateOneWithoutRelationsInput'
    found_by: 'UserUpdateManyWithoutRelationsInput'
    data: 'fields.Base64'


class Object3DUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    data: 'fields.Base64'


class Object3DUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['Object3DCreateWithoutRelationsInput']
    connect: List['Object3DWhereUniqueInput']
    set: List['Object3DWhereUniqueInput']
    disconnect: List['Object3DWhereUniqueInput']
    delete: List['Object3DWhereUniqueInput']

    # TODO
    # update: List['Object3DUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['Object3DUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['Object3DScalarWhereInput']
    # upsert: List['Object3DUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['Object3DCreateOrConnectWithoutRelationsInput']


class Object3DUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'Object3DCreateWithoutRelationsInput'
    connect: 'Object3DWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'Object3DUpdateInput'
    # upsert: 'Object3DUpsertWithoutRelationsInput'
    # connectOrCreate: 'Object3DCreateOrConnectWithoutRelationsInput'


class Object3DUpsertInput(TypedDict):
    create: 'Object3DCreateInput'
    update: 'Object3DUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Object3D_id_OrderByInput = TypedDict(
    '_Object3D_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Object3D_placeId_OrderByInput = TypedDict(
    '_Object3D_placeId_OrderByInput',
    {
        'placeId': 'SortOrder',
    },
    total=True
)

_Object3D_data_OrderByInput = TypedDict(
    '_Object3D_data_OrderByInput',
    {
        'data': 'SortOrder',
    },
    total=True
)

Object3DOrderByInput = Union[
    '_Object3D_id_OrderByInput',
    '_Object3D_placeId_OrderByInput',
    '_Object3D_data_OrderByInput',
]



# recursive Object3D types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

Object3DRelationFilter = TypedDict(
    'Object3DRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class Object3DListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class Object3DInclude(TypedDict, total=False):
    """Object3D relational arguments"""
    location: Union[bool, 'PlaceArgsFromObject3D']
    found_by: Union[bool, 'FindManyUserArgsFromObject3D']


    

class UserIncludeFromObject3D(TypedDict, total=False):
    """Relational arguments for Object3D"""
    places: Union[bool, 'FindManyPlaceArgsFromObject3DRecursive1']
    Object3D: Union[bool, 'Object3DArgsFromObject3DRecursive1']


class UserIncludeFromObject3DRecursive1(TypedDict, total=False):
    """Relational arguments for Object3D"""
    places: Union[bool, 'FindManyPlaceArgsFromObject3DRecursive2']
    Object3D: Union[bool, 'Object3DArgsFromObject3DRecursive2']


class UserIncludeFromObject3DRecursive2(TypedDict, total=False):
    """Relational arguments for Object3D"""
    places: Union[bool, 'FindManyPlaceArgsFromObject3DRecursive3']
    Object3D: Union[bool, 'Object3DArgsFromObject3DRecursive3']


class UserIncludeFromObject3DRecursive3(TypedDict, total=False):
    """Relational arguments for Object3D"""
    places: Union[bool, 'FindManyPlaceArgsFromObject3DRecursive4']
    Object3D: Union[bool, 'Object3DArgsFromObject3DRecursive4']


class UserIncludeFromObject3DRecursive4(TypedDict, total=False):
    """Relational arguments for Object3D"""

    

class UserArgsFromObject3D(TypedDict, total=False):
    """Arguments for Object3D"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromObject3DRecursive1(TypedDict, total=False):
    """Arguments for Object3D"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromObject3DRecursive2(TypedDict, total=False):
    """Arguments for Object3D"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromObject3DRecursive3(TypedDict, total=False):
    """Arguments for Object3D"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromObject3DRecursive4(TypedDict, total=False):
    """Arguments for Object3D"""
    
    

class FindManyUserArgsFromObject3D(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromObject3DRecursive1(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromObject3DRecursive2(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromObject3DRecursive3(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromObject3DRecursive4(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class PlaceIncludeFromObject3D(TypedDict, total=False):
    """Relational arguments for Object3D"""
    User: Union[bool, 'UserArgsFromObject3DRecursive1']
    Object3D: Union[bool, 'FindManyObject3DArgsFromObject3DRecursive1']


class PlaceIncludeFromObject3DRecursive1(TypedDict, total=False):
    """Relational arguments for Object3D"""
    User: Union[bool, 'UserArgsFromObject3DRecursive2']
    Object3D: Union[bool, 'FindManyObject3DArgsFromObject3DRecursive2']


class PlaceIncludeFromObject3DRecursive2(TypedDict, total=False):
    """Relational arguments for Object3D"""
    User: Union[bool, 'UserArgsFromObject3DRecursive3']
    Object3D: Union[bool, 'FindManyObject3DArgsFromObject3DRecursive3']


class PlaceIncludeFromObject3DRecursive3(TypedDict, total=False):
    """Relational arguments for Object3D"""
    User: Union[bool, 'UserArgsFromObject3DRecursive4']
    Object3D: Union[bool, 'FindManyObject3DArgsFromObject3DRecursive4']


class PlaceIncludeFromObject3DRecursive4(TypedDict, total=False):
    """Relational arguments for Object3D"""

    

class PlaceArgsFromObject3D(TypedDict, total=False):
    """Arguments for Object3D"""
    include: 'PlaceIncludeFromPlaceRecursive1'


class PlaceArgsFromObject3DRecursive1(TypedDict, total=False):
    """Arguments for Object3D"""
    include: 'PlaceIncludeFromPlaceRecursive2'


class PlaceArgsFromObject3DRecursive2(TypedDict, total=False):
    """Arguments for Object3D"""
    include: 'PlaceIncludeFromPlaceRecursive3'


class PlaceArgsFromObject3DRecursive3(TypedDict, total=False):
    """Arguments for Object3D"""
    include: 'PlaceIncludeFromPlaceRecursive4'


class PlaceArgsFromObject3DRecursive4(TypedDict, total=False):
    """Arguments for Object3D"""
    
    

class FindManyPlaceArgsFromObject3D(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    include: 'PlaceIncludeFromPlaceRecursive1'


class FindManyPlaceArgsFromObject3DRecursive1(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    include: 'PlaceIncludeFromPlaceRecursive2'


class FindManyPlaceArgsFromObject3DRecursive2(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    include: 'PlaceIncludeFromPlaceRecursive3'


class FindManyPlaceArgsFromObject3DRecursive3(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    include: 'PlaceIncludeFromPlaceRecursive4'


class FindManyPlaceArgsFromObject3DRecursive4(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['PlaceOrderByInput', List['PlaceOrderByInput']]
    where: 'PlaceWhereInput'
    cursor: 'PlaceWhereUniqueInput'
    
    

class Object3DIncludeFromObject3D(TypedDict, total=False):
    """Relational arguments for Object3D"""
    location: Union[bool, 'PlaceArgsFromObject3DRecursive1']
    found_by: Union[bool, 'FindManyUserArgsFromObject3DRecursive1']


class Object3DIncludeFromObject3DRecursive1(TypedDict, total=False):
    """Relational arguments for Object3D"""
    location: Union[bool, 'PlaceArgsFromObject3DRecursive2']
    found_by: Union[bool, 'FindManyUserArgsFromObject3DRecursive2']


class Object3DIncludeFromObject3DRecursive2(TypedDict, total=False):
    """Relational arguments for Object3D"""
    location: Union[bool, 'PlaceArgsFromObject3DRecursive3']
    found_by: Union[bool, 'FindManyUserArgsFromObject3DRecursive3']


class Object3DIncludeFromObject3DRecursive3(TypedDict, total=False):
    """Relational arguments for Object3D"""
    location: Union[bool, 'PlaceArgsFromObject3DRecursive4']
    found_by: Union[bool, 'FindManyUserArgsFromObject3DRecursive4']


class Object3DIncludeFromObject3DRecursive4(TypedDict, total=False):
    """Relational arguments for Object3D"""

    

class Object3DArgsFromObject3D(TypedDict, total=False):
    """Arguments for Object3D"""
    include: 'Object3DIncludeFromObject3DRecursive1'


class Object3DArgsFromObject3DRecursive1(TypedDict, total=False):
    """Arguments for Object3D"""
    include: 'Object3DIncludeFromObject3DRecursive2'


class Object3DArgsFromObject3DRecursive2(TypedDict, total=False):
    """Arguments for Object3D"""
    include: 'Object3DIncludeFromObject3DRecursive3'


class Object3DArgsFromObject3DRecursive3(TypedDict, total=False):
    """Arguments for Object3D"""
    include: 'Object3DIncludeFromObject3DRecursive4'


class Object3DArgsFromObject3DRecursive4(TypedDict, total=False):
    """Arguments for Object3D"""
    
    

class FindManyObject3DArgsFromObject3D(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    include: 'Object3DIncludeFromObject3DRecursive1'


class FindManyObject3DArgsFromObject3DRecursive1(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    include: 'Object3DIncludeFromObject3DRecursive2'


class FindManyObject3DArgsFromObject3DRecursive2(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    include: 'Object3DIncludeFromObject3DRecursive3'


class FindManyObject3DArgsFromObject3DRecursive3(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    include: 'Object3DIncludeFromObject3DRecursive4'


class FindManyObject3DArgsFromObject3DRecursive4(TypedDict, total=False):
    """Arguments for Object3D"""
    take: int
    skip: int
    order_by: Union['Object3DOrderByInput', List['Object3DOrderByInput']]
    where: 'Object3DWhereInput'
    cursor: 'Object3DWhereUniqueInput'
    


FindManyObject3DArgs = FindManyObject3DArgsFromObject3D
FindFirstObject3DArgs = FindManyObject3DArgsFromObject3D


    

class Object3DWhereInput(TypedDict, total=False):
    """Object3D arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    location: 'PlaceRelationFilter'
    placeId: Union[_str, 'types.StringFilter']
    found_by: 'UserListRelationFilter'
    data: Union['fields.Base64', 'types.BytesFilter']

    # should be noted that AND and NOT should be Union['Object3DWhereInputRecursive1', List['Object3DWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['Object3DWhereInputRecursive1']
    OR: List['Object3DWhereInputRecursive1']
    NOT: List['Object3DWhereInputRecursive1']


class Object3DWhereInputRecursive1(TypedDict, total=False):
    """Object3D arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    location: 'PlaceRelationFilter'
    placeId: Union[_str, 'types.StringFilter']
    found_by: 'UserListRelationFilter'
    data: Union['fields.Base64', 'types.BytesFilter']

    # should be noted that AND and NOT should be Union['Object3DWhereInputRecursive2', List['Object3DWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['Object3DWhereInputRecursive2']
    OR: List['Object3DWhereInputRecursive2']
    NOT: List['Object3DWhereInputRecursive2']


class Object3DWhereInputRecursive2(TypedDict, total=False):
    """Object3D arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    location: 'PlaceRelationFilter'
    placeId: Union[_str, 'types.StringFilter']
    found_by: 'UserListRelationFilter'
    data: Union['fields.Base64', 'types.BytesFilter']

    # should be noted that AND and NOT should be Union['Object3DWhereInputRecursive3', List['Object3DWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['Object3DWhereInputRecursive3']
    OR: List['Object3DWhereInputRecursive3']
    NOT: List['Object3DWhereInputRecursive3']


class Object3DWhereInputRecursive3(TypedDict, total=False):
    """Object3D arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    location: 'PlaceRelationFilter'
    placeId: Union[_str, 'types.StringFilter']
    found_by: 'UserListRelationFilter'
    data: Union['fields.Base64', 'types.BytesFilter']

    # should be noted that AND and NOT should be Union['Object3DWhereInputRecursive4', List['Object3DWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['Object3DWhereInputRecursive4']
    OR: List['Object3DWhereInputRecursive4']
    NOT: List['Object3DWhereInputRecursive4']


class Object3DWhereInputRecursive4(TypedDict, total=False):
    """Object3D arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    location: 'PlaceRelationFilter'
    placeId: Union[_str, 'types.StringFilter']
    found_by: 'UserListRelationFilter'
    data: Union['fields.Base64', 'types.BytesFilter']



# aggregate Object3D types


    

class Object3DScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Object3D arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    placeId: Union[_str, 'types.StringWithAggregatesFilter']
    data: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['Object3DScalarWhereWithAggregatesInputRecursive1']
    OR: List['Object3DScalarWhereWithAggregatesInputRecursive1']
    NOT: List['Object3DScalarWhereWithAggregatesInputRecursive1']


class Object3DScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Object3D arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    placeId: Union[_str, 'types.StringWithAggregatesFilter']
    data: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['Object3DScalarWhereWithAggregatesInputRecursive2']
    OR: List['Object3DScalarWhereWithAggregatesInputRecursive2']
    NOT: List['Object3DScalarWhereWithAggregatesInputRecursive2']


class Object3DScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Object3D arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    placeId: Union[_str, 'types.StringWithAggregatesFilter']
    data: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['Object3DScalarWhereWithAggregatesInputRecursive3']
    OR: List['Object3DScalarWhereWithAggregatesInputRecursive3']
    NOT: List['Object3DScalarWhereWithAggregatesInputRecursive3']


class Object3DScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Object3D arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    placeId: Union[_str, 'types.StringWithAggregatesFilter']
    data: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['Object3DScalarWhereWithAggregatesInputRecursive4']
    OR: List['Object3DScalarWhereWithAggregatesInputRecursive4']
    NOT: List['Object3DScalarWhereWithAggregatesInputRecursive4']


class Object3DScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Object3D arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    placeId: Union[_str, 'types.StringWithAggregatesFilter']
    data: Union['fields.Base64', 'types.BytesWithAggregatesFilter']



class Object3DGroupByOutput(TypedDict, total=False):
    id: _str
    placeId: _str
    data: 'fields.Base64'
    _sum: 'Object3DSumAggregateOutput'
    _avg: 'Object3DAvgAggregateOutput'
    _min: 'Object3DMinAggregateOutput'
    _max: 'Object3DMaxAggregateOutput'
    _count: 'Object3DCountAggregateOutput'


class Object3DAvgAggregateOutput(TypedDict, total=False):
    """Object3D output for aggregating averages"""


class Object3DSumAggregateOutput(TypedDict, total=False):
    """Object3D output for aggregating sums"""


class Object3DScalarAggregateOutput(TypedDict, total=False):
    """Object3D output including scalar fields"""
    id: _str
    placeId: _str
    data: 'fields.Base64'


Object3DMinAggregateOutput = Object3DScalarAggregateOutput
Object3DMaxAggregateOutput = Object3DScalarAggregateOutput


class Object3DMaxAggregateInput(TypedDict, total=False):
    """Object3D input for aggregating by max"""
    id: bool
    placeId: bool
    data: bool


class Object3DMinAggregateInput(TypedDict, total=False):
    """Object3D input for aggregating by min"""
    id: bool
    placeId: bool
    data: bool


class Object3DNumberAggregateInput(TypedDict, total=False):
    """Object3D input for aggregating numbers"""


Object3DAvgAggregateInput = Object3DNumberAggregateInput
Object3DSumAggregateInput = Object3DNumberAggregateInput


Object3DCountAggregateInput = TypedDict(
    'Object3DCountAggregateInput',
    {
        'id': bool,
        'placeId': bool,
        'data': bool,
        '_all': bool,
    },
    total=False,
)

Object3DCountAggregateOutput = TypedDict(
    'Object3DCountAggregateOutput',
    {
        'id': int,
        'placeId': int,
        'data': int,
        '_all': int,
    },
    total=False,
)


Object3DKeys = Literal[
    'id',
    'location',
    'placeId',
    'found_by',
    'data',
]
Object3DScalarFieldKeys = Literal[
    'id',
    'placeId',
    'data',
]
Object3DScalarFieldKeysT = TypeVar('Object3DScalarFieldKeysT', bound=Object3DScalarFieldKeys)

Object3DRelationalFieldKeys = Literal[
        'location',
        'found_by',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields